name: Embedded DevOps CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ گرفتن سورس
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ نصب ابزارهای لازم
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y ninja-build lcov clang-format gcovr gcc

      # 3️⃣ پیکربندی CMake با فلگ‌های پوشش تست
      - name: Configure CMake project
        run: |
          cmake -S . -B build -G "Ninja" \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_C_COMPILER=gcc \
            -DENABLE_CODE_COVERAGE=ON

      # 4️⃣ بیلد پروژه
      - name: Build all targets
        run: cmake --build build -j

      # 5️⃣ اجرای تست‌ها (ایجاد فایل‌های .gcda)
      - name: Run unit tests
        run: cd build && ctest --output-on-failure

     # 6️⃣ محاسبه و خروجی پوشش تست (coverage)
      - name: Generate coverage report
        run: |
          cd build
          lcov --gcov-tool gcov --capture --directory . --output-file coverage.info
          lcov --remove coverage.info '/usr/*' 'tests/*' 'third_party/*' \
            --ignore-errors unused --output-file coverage.info
          lcov --list coverage.info
          genhtml coverage.info --output-directory coverage_html

      # 6.5️⃣ جمع‌بندی پوشش در قالب متن
            # 6.5️⃣ جمع‌بندی پوشش در قالب متن
      - name: Summarize coverage in console
        run: |
          mkdir -p build/coverage_gcovr
          gcovr --root . --object-directory build --filter src --filter include \
          --exclude tests --xml build/coverage.xml \
          --html-details build/coverage_gcovr/index.html --print-summary


      # 7️⃣ ذخیره گزارش به عنوان artifact
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            build/coverage_html
            build/coverage.info

      # 8️⃣ بررسی فرمت کد
      - name: Check code formatting
        run: |
          clang-format --version
          find src include tests -name "*.c" -o -name "*.h" | xargs clang-format --dry-run --Werror

